class Map {

    // const value
    static int MAX_X, MAX_Y, MIN_X, MIN_Y;
    static int len, r, c;
    static int eid;
    static Fog fog;
    static Wall wall;
    static Exit exit;
    static Add add;
    static Double double;

    static Array ex, ey;

    static Array status; /*
        0 : empty
        1 : wall
        2 : exit
        3 : coin
    */

    field boolean test; constructor Map new() {
        var Array tmp;
        var int i, j;
        
        let len = 15;
    
        let MAX_X = 395;
        let MIN_X = 20;
        let MAX_Y = 240;
        let MIN_Y = 15;

        let c = (MAX_X - MIN_X) / len;
        let r = (MAX_Y - MIN_Y) / len;

        let status = Array.new(c);

        let fog = Fog.new();
        let wall = Wall.new();
        let exit = Exit.new();
        let add = Add.new();
        let double = Double.new();

        let ex = Array.new(3);
        let ey = Array.new(3);

        return this;
    }

    method void fill(int x, int y, boolean t, int viewSize) {
        var int i, j;
        // true : horizontal
        if (t) {
            let i = x;
            let j = y;
            while (i < (x + viewSize)) {
                do fog.show(MIN_X + (i*len), MIN_Y + (j*len));
                let i = i + 1;
            }
        } else {
            let i = x;
            let j = y;
            while (j < (y + viewSize)) {
                do fog.show(MIN_X + (i*len), MIN_Y + (j*len));
                let j = j + 1;
            }
        }
        return;
    }
    
    method void show(int i, int j, int tmp) {
        do Screen.setColor(false);
        do Screen.drawRectangle(MIN_X+(i*len)+1, MIN_Y+(j*len)+1, MIN_X+(i*len)+14, MIN_Y+(j*len)+14);
        if (tmp = 1) {
            do wall.show(MIN_X + (i*len), MIN_Y + (j*len));
        } 
        if (tmp = 2) {
            do exit.show(MIN_X + (i*len), MIN_Y + (j*len)); 
        }
        if (tmp = 3) {
            do add.show(MIN_X + (i*len), MIN_Y + (j*len)); 
        }
        if (tmp = 4) {
            do double.show(MIN_X + (i*len), MIN_Y + (j*len)); 
        }

        return;
    }

    method void clear (int x, int y, boolean t, int viewSize) {
        var int i, j;
        var Array tmp;

        // true : horizontal
        if (t) {
            if ((y < 0) | (y > (r-1))) { return; }
            let i = x;
            let j = y;
            while (i < (x + viewSize)) {
                if ((i > (-1)) & (i < c)) {
                    let tmp = status[i];
                    do show(i, j, tmp[j]);
                }
                let i = i + 1;
            }
        } else {
            if ((x < 0) | (x > (c-1))) { return; }
            let i = x;
            let j = y;
            let tmp = status[x];
            while (j < (y + viewSize)) {
                if ((j > (-1)) & (j < r)) {
                    do show(i, j, tmp[j]);
                }
                let j = j + 1;
            }
        }
        return;
    }

    method void clearMap() {
        var int i;
        let i = 0;
        while (i < c) {
            do clear(i, 0, false, r); 
            let i = i + 1;
        }
        return;
    }


    method int xRem(int x) {
        let x = (x - MIN_X) / len;
        return Math.abs(x - ex[eid]);        
    }
    
    method int yRem(int y) {
        let y = (y - MIN_Y) / len;
        return Math.abs(y - ey[eid]);        
    }

    method int move(int x, int y) {
        var Array tmp;
        let tmp = status[x];
        return tmp[y];
    }

    method void erase(int x, int y) {
        var Array tmp;
        do Screen.setColor(false);
        do Screen.drawRectangle(MIN_X+(x*len)+1, MIN_Y+(y*len)+1, MIN_X+(x*len)+14, MIN_Y+(y*len)+14);
        let tmp = status[x];
        let tmp[y] = 0;

        return;
    }

    method void drawLine(int x, int y1, int y2) {
        var int i;
        var Array tmp;

        let i = y1;
        let tmp = status[x];

        while (i < (y2+1)) {
            let tmp[i] = 1;
            let i = i + 1;
        }
        return;
        
    }

    method void op(int x, int y, int t) {
        var Array tmp;
        let tmp = status[x];
        let tmp[y] = t;
        return;
    }

    method void drawMap(int t) {
        var Array tmp;
        if (t = 0) {
            // exit
            let tmp = status[0];
            let tmp[0] = 2;
            let eid = 0;
            let ex[0] = 0;
            let ey[0] = 0;

            
            // add
            do op(3, 0, 3);
            do op(5, 7, 3);
            do op(5, 11, 3);
            do op(8, 2, 3);
            do op(14, 5, 3);
            do op(16, 5, 3);
            do op(18, 10, 3);
            do op(19, 0, 3);
            do op(21, 11, 3);

            // double
            do op(0, 11, 4);
            do op(2, 0, 4);
            do op(3, 9, 4);
            do op(10, 13, 4);
            do op(15, 5, 4);
            do op(16, 11, 4);
            do op(20, 6, 4);
            do op(23, 0, 4);
            

            // wall
            do drawLine(0, 10, 10);
            do drawLine(1, 0, 3);
            do drawLine(1, 5, 8);
            do drawLine(1, 10, 10);
            do drawLine(2, 1, 1);
            do drawLine(2, 3, 5);
            do drawLine(2, 7, 7);
            do drawLine(2, 10, 13);
            do drawLine(3, 1, 1);
            do drawLine(3, 7, 7);
            do drawLine(4, 1, 3);
            do drawLine(4, 5, 5);
            do drawLine(4, 7, 13);
            do drawLine(5, 3, 3);
            do drawLine(5, 5, 5);
            do drawLine(5, 10, 10);
            do drawLine(5, 13, 13);
            do drawLine(6, 1, 1);
            do drawLine(6, 3, 3);
            do drawLine(6, 5, 6);
            do drawLine(6, 8, 8);
            do drawLine(6, 10, 10);
            do drawLine(6, 13, 13);
            do drawLine(7, 1, 1);
            do drawLine(7, 3, 3);
            do drawLine(7, 6, 6);
            do drawLine(7, 8, 8);
            do drawLine(7, 10, 10);
            do drawLine(8, 1, 1);
            do drawLine(8, 3, 4);
            do drawLine(8, 6, 6);
            do drawLine(8, 8, 8);
            do drawLine(8, 10, 13);
            do drawLine(9, 1, 4);
            do drawLine(9, 6, 6);
            do drawLine(9, 8, 8);
            do drawLine(9, 12, 13);
            do drawLine(10, 6, 6);
            do drawLine(10, 8, 8);
            do drawLine(10, 12, 12);
            do drawLine(11, 1, 6);
            do drawLine(11, 8, 10);
            do drawLine(11, 12, 12);
            do drawLine(12, 12, 12);
            do drawLine(13, 1, 2);
            do drawLine(13, 4, 6);
            do drawLine(13, 8, 13);
            do drawLine(14, 1, 2);
            do drawLine(14, 4, 4);
            do drawLine(14, 6, 6);
            do drawLine(14, 8, 8);
            do drawLine(15, 1, 2);
            do drawLine(15, 4, 4);
            do drawLine(15, 6, 6);
            do drawLine(15, 8, 8);
            do drawLine(15, 10, 13);
            do drawLine(16, 1, 2);
            do drawLine(16, 4, 4);
            do drawLine(16, 6, 6);
            do drawLine(16, 8, 8);
            do drawLine(16, 10, 10);
            do drawLine(16, 13, 13);
            do drawLine(17, 4, 6);
            do drawLine(17, 8, 8);
            do drawLine(17, 10, 11);
            do drawLine(17, 13, 13);
            do drawLine(18, 0, 1);
            do drawLine(18, 11, 11);
            do drawLine(18, 13, 13);
            do drawLine(19, 1, 1);
            do drawLine(19, 3, 3);
            do drawLine(19, 5, 9);
            do drawLine(19, 11, 11);
            do drawLine(19, 13, 13);
            do drawLine(20, 1, 1);
            do drawLine(20, 3, 3);
            do drawLine(20, 5, 5);
            do drawLine(20, 9, 9);
            do drawLine(20, 11, 11);
            do drawLine(21, 1, 1);
            do drawLine(21, 3, 3);
            do drawLine(21, 5, 5);
            do drawLine(21, 9, 9);
            do drawLine(21, 11, 11);
            do drawLine(21, 13, 14);
            do drawLine(22, 3, 3);
            do drawLine(22, 5, 5);
            do drawLine(22, 9, 9);
            do drawLine(22, 11, 13);
            do drawLine(23, 1, 3);
            do drawLine(23, 5, 7);
            do drawLine(23, 9, 9);
            do drawLine(23, 13, 13);
            do drawLine(24, 9, 9);
        }
        if (t = 1) {
            // exit
            let tmp = status[18];
            let tmp[5] = 2;
            let eid = 1;
            let ex[1] = 18;
            let ey[1] = 5;

            // add
            do op(4, 12, 3);
            do op(8, 7, 3);
            do op(8, 13, 3);
            do op(11, 0, 3);
            do op(12, 0, 3);
            do op(13, 0, 3);
            do op(14, 0, 3);
            do op(15, 0, 3);
            do op(20, 11, 3);
            do op(24, 11, 3);

            // double
            do op(0, 5, 4);
            do op(14, 2, 4);
            do op(17, 9, 4);
            do op(24, 7, 4);

            // wall
            do drawLine(0, 6, 6);
            do drawLine(0, 10, 10);
            do drawLine(1, 1, 6);
            do drawLine(1, 8, 8);
            do drawLine(1, 10, 10);
            do drawLine(1, 12, 13);
            do drawLine(2, 8, 8);
            do drawLine(2, 10, 10);
            do drawLine(2, 13, 13);
            do drawLine(3, 1, 6);
            do drawLine(3, 8, 8);
            do drawLine(3, 10, 10);
            do drawLine(3, 13, 13);
            do drawLine(4, 1, 1);
            do drawLine(4, 8, 8);
            do drawLine(4, 10, 10);
            do drawLine(4, 13, 13);
            do drawLine(5, 1, 1);
            do drawLine(5, 3, 8);
            do drawLine(5, 10, 13);
            do drawLine(6, 1, 1);
            do drawLine(7, 1, 2);
            do drawLine(7, 4, 10);
            do drawLine(7, 12, 14);
            do drawLine(8, 2, 2);
            do drawLine(8, 4, 4);
            do drawLine(8, 8, 8);
            do drawLine(8, 10, 10);
            do drawLine(8, 12, 12);
            do drawLine(9, 0, 0);
            do drawLine(9, 2, 2);
            do drawLine(9, 4, 4);
            do drawLine(9, 6, 8);
            do drawLine(9, 10, 10);
            do drawLine(9, 12, 12);
            do drawLine(10, 2, 2);
            do drawLine(10, 4, 4);
            do drawLine(11, 1, 2);
            do drawLine(11, 4, 12);
            do drawLine(11, 14, 14);
            do drawLine(12, 1, 1);
            do drawLine(12, 12, 12);
            do drawLine(13, 1, 1);
            do drawLine(13, 3, 6);
            do drawLine(13, 8, 8);
            do drawLine(13, 10, 10);
            do drawLine(13, 12, 13);
            do drawLine(14, 1, 1);
            do drawLine(14, 8, 8);
            do drawLine(14, 10, 10);
            do drawLine(14, 12, 12);
            do drawLine(15, 1, 8);
            do drawLine(15, 10, 10);
            do drawLine(15, 12, 12);
            do drawLine(15, 14, 14);
            do drawLine(16, 8, 8);
            do drawLine(16, 10, 10);
            do drawLine(16, 12, 12);
            do drawLine(17, 1, 6);
            do drawLine(17, 8, 8);
            do drawLine(18, 1, 1);
            do drawLine(18, 6, 6);
            do drawLine(18, 8, 13);
            do drawLine(19, 1, 1);
            do drawLine(19, 3, 6);
            do drawLine(19, 8, 8);
            do drawLine(19, 12, 12);
            do drawLine(20, 1, 1);
            do drawLine(20, 8, 8);
            do drawLine(20, 10, 10);
            do drawLine(20, 12, 12);
            do drawLine(21, 1, 8);
            do drawLine(21, 10, 12);
            do drawLine(23, 1, 8);
            do drawLine(23, 10, 12);
            do drawLine(24, 8, 8);
            do drawLine(24, 12, 12);

        }
        return;
    }


    method void build(int id) {
        var int i;
        var int j;
        var Array tmp;

        let i = 0;
        
        while (i < c) {
            let status[i] = Array.new(r);
            let tmp = status[i];
            let j = 0;
            while (j < r) {
                let tmp[j] = 0; 
                let j = j + 1;
            }
            let i = i + 1;
        }
        
        // clearOutput
        do Screen.setColor(false);
        do Screen.drawRectangle(410, 10, 500, 70);

        // Clear the window
        do Screen.setColor(false);
        do Screen.drawRectangle(MIN_X+1, MIN_Y+1, MAX_X-1, MAX_Y-1);

        // Draw the edge
        do Screen.setColor(true);
        do Screen.drawLine(MIN_X, MIN_Y, MAX_X, MIN_Y);
        do Screen.drawLine(MIN_X, MAX_Y, MAX_X, MAX_Y);
        do Screen.drawLine(MIN_X, MIN_Y, MIN_X, MAX_Y);
        do Screen.drawLine(MAX_X, MIN_Y, MAX_X, MAX_Y);

        // grid
        let i = c - 1;
        let j = r - 1;

        while (j > 0) {
            do Screen.drawLine(MIN_X, MIN_Y + (j * len), MAX_X, MIN_Y + (j * len));
            let j = j - 1;
        }

        while (i > 0) {
            do Screen.drawLine(MIN_X + (i * len), MIN_Y, MIN_X + (i * len), MAX_Y);
            let i = i - 1;
        }

        // draw the map
        do drawMap(id);

        let i = 0;


        while (i < c) {
            let j = 0;
            while (j < r) {
                do fog.show(MIN_X + (i*len), MIN_Y + (j*len));
                let j = j + 1;
            }
            let i = i + 1;
        }


        // right bar
        do Output.moveCursor(6, 54);
        do Output.printString("-----");
        do Output.moveCursor(8, 51);
        do Output.printString("S : start");
        do Output.moveCursor(10, 51);
        do Output.printString("R : restart");
        do Output.moveCursor(12, 51);
        do Output.printString("Arrow : move");
        do Output.moveCursor(14, 54);
        do Output.printString("-----");

        do Output.moveCursor(16, 51);
        do Output.printString("X : ");
        do Output.moveCursor(18, 51);
        do Output.printString("Y : ");
        do Output.moveCursor(20, 51);
        do Output.printString("Remain : ");
        
        return;
    }

    method void gameStart() {
        var int ddx;
        var int dx, dy;
        let ddx = 1;
        let dx = 13;
        let dy = 4;         
        do Screen.setColor(false);
        do Screen.drawRectangle(410, 10, 500, 70);
        do Screen.setColor(true);
        // G
        do Screen.drawRectangle(415+dx, 15+dy, 430+dx, 20+dy);    
        do Screen.drawRectangle(410+dx, 20+dy, 415+dx, 53+dy);    
        do Screen.drawRectangle(415+dx, 53+dy, 430+dx, 58+dy);    
        do Screen.drawRectangle(430+dx, 20+dy, 435+dx, 25+dy);    
        do Screen.drawRectangle(430+dx, 37+dy, 435+dx, 53+dy);    
        do Screen.drawRectangle(425+dx, 37+dy, 430+dx, 42+dy);    
        // O
        do Screen.drawRectangle(445+dx+ddx, 15+dy, 460+dx+ddx, 20+dy);    
        do Screen.drawRectangle(440+dx+ddx, 21+dy, 445+dx+ddx, 53+dy);    
        do Screen.drawRectangle(445+dx+ddx, 53+dy, 460+dx+ddx, 58+dy);    
        do Screen.drawRectangle(460+dx+ddx, 21+dy, 465+dx+ddx, 53+dy);    

        return;
    }

    method void gameOver(boolean t) {
        var int ddx;
        var int dx, dy;

        do Screen.setColor(false);
        do Screen.drawRectangle(410, 10, 500, 70);
        do Screen.setColor(true);

        // true : AC

        if (t) {
            let ddx = 1;
            let dx = 13;
            let dy = 4;         
            // A
            do Screen.drawRectangle(415+dx, 15+dy, 430+dx, 20+dy);    
            do Screen.drawRectangle(410+dx, 21+dy, 415+dx, 58+dy);    
            do Screen.drawRectangle(430+dx, 21+dy, 435+dx, 58+dy);    
            do Screen.drawRectangle(414+dx, 35+dy, 431+dx, 40+dy);    
            // C
            do Screen.drawRectangle(445+dx+ddx, 15+dy, 460+dx+ddx, 20+dy);    
            do Screen.drawRectangle(440+dx+ddx, 21+dy, 445+dx+ddx, 53+dy);    
            do Screen.drawRectangle(445+dx+ddx, 53+dy, 460+dx+ddx, 58+dy);    
            do Screen.drawRectangle(460+dx+ddx, 21+dy, 465+dx+ddx, 25+dy);    
            do Screen.drawRectangle(460+dx+ddx, 48+dy, 465+dx+ddx, 53+dy);    
        }

        // false : WA

        if (~t) {
            let ddx = 36;
            let dx = 8;
            let dy = 4;
            // W
            do Screen.drawRectangle(415+dx, 15+dy, 420+dx, 53+dy);    
            do Screen.drawRectangle(420+dx, 53+dy, 425+dx, 58+dy);    
            do Screen.drawRectangle(425+dx, 40+dy, 430+dx, 53+dy);    
            do Screen.drawRectangle(430+dx, 53+dy, 435+dx, 58+dy);    
            do Screen.drawRectangle(435+dx, 15+dy, 440+dx, 53+dy);    
            // A
            do Screen.drawRectangle(415+dx+ddx, 15+dy, 430+dx+ddx, 20+dy);    
            do Screen.drawRectangle(410+dx+ddx, 21+dy, 415+dx+ddx, 58+dy);    
            do Screen.drawRectangle(430+dx+ddx, 21+dy, 435+dx+ddx, 58+dy);    
            do Screen.drawRectangle(414+dx+ddx, 35+dy, 431+dx+ddx, 40+dy);    
        }                                 
        return;
    }

    method void dispose() {
        do status.dispose();
        do Memoery.deAlloc(this);
        return;
    }
}
