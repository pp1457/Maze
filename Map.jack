class Map {

    // const value
    static int MAX_X, MAX_Y, MIN_X, MIN_Y;
    static int len, r, c;
    static Fog fog;
    static Wall wall;

    static Array status;

    field boolean test;

    constructor Map new() {
        var Array tmp;
        var int i, j;
        
        let len = 15;
    
        let MAX_X = 395;
        let MIN_X = 20;
        let MAX_Y = 240;
        let MIN_Y = 15;

        let c = (MAX_X - MIN_X) / len;
        let r = (MAX_Y - MIN_Y) / len;

        let status = Array.new(c);

        let i = 0;
        
        while (i < c) {
            let status[i] = Array.new(r);
            let tmp = status[i];
            let j = 0;
            while (j < r) {
                let tmp[j] = 0; 
                let j = j + 1;
            }
            let i = i + 1;
        }

        let fog = Fog.new();
        let wall = Wall.new();

        return this;
    }

    method void fill(int x, int y, boolean t) {
        var int i, j;
        // true : horizontal
        if (t) {
            let i = x;
            let j = y;
            while (i < (x + 3)) {
                do fog.show(MIN_X + (i*len), MIN_Y + (j*len));
                let i = i + 1;
            }
        } else {
            let i = x;
            let j = y;
            while (j < (y + 3)) {
                do fog.show(MIN_X + (i*len), MIN_Y + (j*len));
                let j = j + 1;
            }
        }
        return;
    }

    method void clear (int x, int y, boolean t) {
        var int i, j;
        var Array tmp;

        // true : horizontal
        if (t) {
            if ((y < 0) | (y > (r-1))) { return; }
            let i = x;
            let j = y;
            while (i < (x + 3)) {
                if ((i > (-1)) & (i < c)) {
                    let tmp = status[i];
                    if (tmp[j] = 1) {
                        do wall.show(MIN_X + (i*len), MIN_Y + (j*len));
                    } else {
                        do Screen.setColor(false);
                        do Screen.drawRectangle(MIN_X+(i*len)+1, MIN_Y+(j*len)+1, MIN_X+(i*len)+14, MIN_Y+(j*len)+14);
                    }
                }
                let i = i + 1;
            }
        } else {
            if ((x < 0) | (x > (c-1))) { return; }
            let i = x;
            let j = y;
            let tmp = status[x];
            while (j < (y + 3)) {
                if ((j > (-1)) & (j < r)) {
                    if (tmp[j] = 1) {
                        do wall.show(MIN_X + (i*len), MIN_Y + (j*len));
                    } else {
                        do Screen.setColor(false);
                        do Screen.drawRectangle(MIN_X+(i*len)+1, MIN_Y+(j*len)+1, MIN_X+(i*len)+14, MIN_Y+(j*len)+14);
                    }
                }
                let j = j + 1;
            }
        }
        return;
    }

    method boolean move(int x, int y) {
        var Array tmp;
        let tmp = status[x];
        if (tmp[y] = 1) { return false; }
        return true;
    }

    method void drawLine(int x, int y1, int y2) {
        var int i;
        var Array tmp;

        let i = y1;
        let tmp = status[x];

        while (i < (y2+1)) {
            let tmp[i] = 1;
            let i = i + 1;
        }
        return;
        
    }

    method void drawMap() {
        do drawLine(1, 0, 3);
        do drawLine(1, 5, 8);
        do drawLine(1, 10, 10);
        do drawLine(2, 1, 1);
        do drawLine(2, 3, 5);
        do drawLine(2, 7, 7);
        do drawLine(2, 10, 13);
        do drawLine(3, 1, 1);
        do drawLine(3, 7, 7);
        do drawLine(4, 1, 3);
        do drawLine(4, 5, 5);
        do drawLine(4, 7, 13);
        do drawLine(5, 3, 3);
        do drawLine(5, 5, 5);
        do drawLine(5, 10, 10);
        do drawLine(5, 13, 13);
        do drawLine(6, 1, 1);
        do drawLine(6, 3, 3);
        do drawLine(6, 5, 6);
        do drawLine(6, 8, 8);
        do drawLine(6, 10, 10);
        do drawLine(6, 13, 13);
        do drawLine(7, 1, 1);
        do drawLine(7, 3, 3);
        do drawLine(7, 6, 6);
        do drawLine(7, 8, 8);
        do drawLine(7, 10, 10);
        do drawLine(8, 1, 1);
        do drawLine(8, 3, 4);
        do drawLine(8, 6, 6);
        do drawLine(8, 8, 8);
        do drawLine(8, 10, 13);
        do drawLine(9, 1, 4);
        do drawLine(9, 6, 6);
        do drawLine(9, 8, 8);
        do drawLine(9, 12, 13);
        do drawLine(10, 6, 6);
        do drawLine(10, 8, 8);
        do drawLine(10, 12, 12);
        do drawLine(11, 1, 6);
        do drawLine(11, 8, 10);
        do drawLine(11, 12, 12);
        do drawLine(12, 12, 12);
        do drawLine(13, 1, 2);
        do drawLine(13, 4, 6);
        do drawLine(13, 8, 13);
        do drawLine(14, 1, 2);
        do drawLine(14, 4, 4);
        do drawLine(14, 6, 6);
        do drawLine(14, 8, 8);
        do drawLine(15, 1, 2);
        do drawLine(15, 4, 4);
        do drawLine(15, 6, 6);
        do drawLine(15, 8, 8);
        do drawLine(15, 10, 13);
        do drawLine(16, 1, 2);
        do drawLine(16, 4, 4);
        do drawLine(16, 6, 6);
        do drawLine(16, 8, 8);
        do drawLine(16, 10, 10);
        do drawLine(16, 13, 13);
        do drawLine(17, 4, 6);
        do drawLine(17, 8, 8);
        do drawLine(17, 10, 11);
        do drawLine(17, 13, 13);
        do drawLine(18, 0, 1);
        do drawLine(18, 11, 11);
        do drawLine(18, 13, 13);
        do drawLine(19, 1, 1);
        do drawLine(19, 3, 3);
        do drawLine(19, 5, 9);
        do drawLine(19, 11, 11);
        do drawLine(19, 13, 13);
        do drawLine(20, 1, 1);
        do drawLine(20, 3, 3);
        do drawLine(20, 5, 5);
        do drawLine(20, 9, 9);
        do drawLine(20, 11, 11);
        do drawLine(21, 1, 1);
        do drawLine(21, 3, 3);
        do drawLine(21, 5, 5);
        do drawLine(21, 9, 9);
        do drawLine(21, 11, 11);
        do drawLine(21, 13, 14);
        do drawLine(22, 3, 3);
        do drawLine(22, 5, 5);
        do drawLine(22, 9, 9);
        do drawLine(22, 11, 13);
        do drawLine(23, 1, 3);
        do drawLine(23, 5, 7);
        do drawLine(23, 9, 9);
        do drawLine(23, 13, 13);
        do drawLine(24, 9, 9);
        return;
    }


    method void build() {
        var int i;
        var int j;

        // Draw the edge
        do Screen.drawLine(MIN_X, MIN_Y, MAX_X, MIN_Y);
        do Screen.drawLine(MIN_X, MAX_Y, MAX_X, MAX_Y);
        do Screen.drawLine(MIN_X, MIN_Y, MIN_X, MAX_Y);
        do Screen.drawLine(MAX_X, MIN_Y, MAX_X, MAX_Y);

        // Stastistic
        do Output.moveCursor(3, 52);
        do Output.printString("score:");

        // Grid
        let i = c - 1;
        let j = r - 1;

        while (j > 0) {
            do Screen.drawLine(MIN_X, MIN_Y + (j * len), MAX_X, MIN_Y + (j * len));
            let j = j - 1;
        }

        while (i > 0) {
            do Screen.drawLine(MIN_X + (i * len), MIN_Y, MIN_X + (i * len), MAX_Y);
            let i = i - 1;
        }

        // draw the map
        do drawMap();


        let i = 0;

        while (i < c) {
            let j = 0;
            while (j < r) {
                do fog.show(MIN_X + (i*len), MIN_Y + (j*len));
                let j = j + 1;
            }
            let i = i + 1;
        }
        
        return;
    }

    method void dispose() {
        do status.dispose();
        do Memoery.deAlloc(this);
        return;
    }
}
