class Player {
    static int MAX_X, MAX_Y, MIN_X, MIN_Y;
    static int len, r, c;
    static Array a;
    static int x, y;
    static int remain;
    static Map map;
    static int viewDist, viewSize;
    static int init;
    static int mid;
    static boolean win;

    static int xDist, yDist;

    field boolean end;
    field boolean start;

    constructor Player new() {

        let len = 15;
        let viewDist = 2;
        let viewSize = 2 * viewDist + 1;
    
        let MAX_X = 395;
        let MIN_X = 20;
        let MAX_Y = 240;
        let MIN_Y = 15;

        let c = (MAX_X - MIN_X) / len;
        let r = (MAX_Y - MIN_Y) / len;

        let mid = 1;

        let map = Map.new();
        do map.build(mid);

        let a = Array.new(15); 
        
        let a[0] = 13933;   
        let a[1] = 3424;
        let a[2] = 8452;
        let a[3] = 9983;
        let a[4] = 31888;
        let a[5] = 22232;
        let a[6] = 13933;
        let a[7] = 3424;
        let a[8] = 8452;
        let a[9] = 9983;
        let a[10] = 31888; 
        let a[11] = 22232; 
        let a[12] = 12344;
        let a[13] = 11233;
        let a[14] = 11399;

        let end = false;
        let start = false;

        let init = 32;
        let remain = init;
        let win = false;

        return this;
    }

    method void showDis() {
        var String str;
        let str = "    ";     
        do Output.moveCursor(16, 55);
        do Output.printString(str);
        do Output.moveCursor(16, 55);
        do Output.printInt(xDist);
        do Output.moveCursor(18, 55);
        do Output.printString(str);
        do Output.moveCursor(18, 55);
        do Output.printInt(yDist);
        do Output.moveCursor(20, 60);
        do Output.printString(str);
        do Output.moveCursor(20, 60);
        do Output.printInt(remain);

        do str.dispose();
        return;
    }
    
    method void restart() {
        var String str;
        let x = 208;
        let y = 128;
        let remain = init;

        let str = "    ";

        do Output.moveCursor(16, 55);
        do Output.printString(str);
        do Output.moveCursor(18, 55);
        do Output.printString(str);
        do Output.moveCursor(20, 60);
        do Output.printString(str);
        
        do str.dispose();

        if (win) {
            let mid = 1 - mid;
        }

        let win = false;

        do map.build(mid);

        do map.gameStart();

        do map.clear(10, 5, true, viewSize);
        do map.clear(10, 6, true, viewSize);
        do map.clear(10, 7, true, viewSize);
        do map.clear(10, 8, true, viewSize);
        do map.clear(10, 9, true, viewSize);
        do show(x, y, true);
        let xDist = map.xRem(x);
        let yDist = map.yRem(y);
        do showDis();
        let end = false;
        return;
    }

    method void start() {
        if (start) { return; }
        let x = 208;
        let y = 128;
        let start = true; 

        do map.gameStart();

        do map.clear(10, 5, true, viewSize);
        do map.clear(10, 6, true, viewSize);
        do map.clear(10, 7, true, viewSize);
        do map.clear(10, 8, true, viewSize);
        do map.clear(10, 9, true, viewSize);

        do show(x, y, true);

        let xDist = map.xRem(x);
        let yDist = map.yRem(y);

        do showDis();
        let end = false;
        return;
    }

    method void show(int x, int y, boolean t) {
        do Screen.setColor(t);
        do Screen.drawCircle(x, y, 5); 
        return;
    }

    method int valid(int x, int y) {
        var int checkMap;
        var int r, c;

        if ((x < MIN_X) | (x > MAX_X) | (y < MIN_Y) | (y > MAX_Y)) { return 1; }

        let c = Math.divide((x - MIN_X), len);
        let r = Math.divide((y - MIN_Y), len);

        let checkMap = map.move(c, r);  

        return checkMap;
    }


    method void move(int direction) {
        /*
        1 : up
        2 : down
        3 : left 
        4 : right
        */

        var int x2, y2;
        var int tx, ty;
        var boolean d;
        var int check;

        if ((~start) | end) { return; }
        
        let x2 = x;
        let y2 = y;

        if (direction = 1) { let y2  = y2 - len; } 
        if (direction = 2) { let y2  = y2 + len; }
        if (direction = 3) { let x2  = x2 - len; } 
        if (direction = 4) { let x2  = x2 + len; }

        let check = valid(x2, y2);

        if ((check = 0) | (check = 3) | (check = 4)) {
            let tx = (x - MIN_X) / len;
            let ty = (y - MIN_Y) / len;

            if (direction = 1) { 
                let tx  = tx - viewDist; 
                let ty  = ty + viewDist; 
                let d = true;
            } 
            if (direction = 2) {
                let tx  = tx - viewDist; 
                let ty  = ty - viewDist; 
                let d = true;
            }
            if (direction = 3) {
                let tx  = tx + viewDist; 
                let ty  = ty - viewDist; 
                let d = false;
            } 
            if (direction = 4) { 
                let tx  = tx - viewDist; 
                let ty  = ty - viewDist; 
                let d = false;
            }
            
            do map.fill(tx, ty, d, viewSize);
            do show(x, y, false);
            
            let x = x2;
            let y = y2;
            let tx = (x - MIN_X) / len;
            let ty = (y - MIN_Y) / len;

            if (check = 3) {
                let remain = remain + 8;
                do map.erase(tx, ty);
            }

            if (check = 4) {
                let remain = remain * 2;
                do map.erase(tx, ty);
            }
            
            if (direction = 1) { 
                let tx  = tx - viewDist; 
                let ty  = ty - viewDist; 
                let d = true;
            } 
            if (direction = 2) {
                let tx  = tx - viewDist; 
                let ty  = ty + viewDist; 
                let d = true;
            }
            if (direction = 3) {
                let tx  = tx - viewDist; 
                let ty  = ty - viewDist; 
                let d = false;
            } 
            if (direction = 4) { 
                let tx  = tx + viewDist; 
                let ty  = ty - viewDist; 
                let d = false;
            }

            do map.clear(tx, ty, d, viewSize);

            let tx = xDist;
            let ty = yDist;

            let xDist = map.xRem(x);
            let yDist = map.yRem(y);

            if (xDist < tx | yDist < ty) {
                let remain = remain - 3;
            } else {
                let remain = remain + 1;
            }

            do showDis();

            if (remain < 1) {
                let end = true;
                do map.clearMap();
                do map.gameOver(false);
                return;
            }

            do show(x, y, true);
        }

        if (check = 2) {
            let end = true;
            let xDist = 0;
            let yDist = 0;
            let win = true;
            do show(x, y, false);
            do showDis();
            do map.clearMap();
            do map.gameOver(true);
        }

        return;
    }

    method void dispose() {
        do a.dispose();
        do map.dispose();
        do Memory.deAlloc(this);
        return;
    }

}
